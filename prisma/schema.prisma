// NEW FLEXIBLE SCHEMA DESIGN
// This will replace the current schema.prisma after migration

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Core entities (mostly unchanged)
model Instructor {
  id        String @id @default(cuid())
  name      String
  hourlyWage Int   // in ISK
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  programAssignments ProgramInstructor[]
  
  @@map("instructors")
}

model Year {
  id        String @id @default(cuid())
  year      Int    @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  programs Program[]
  seasons  Season[]
  venuePayments VenuePayment[]
  
  @@map("years")
}

// CHANGED: Now serves as templates only (keeping original structure for now)
model ProgramType {
  id          String @id @default(cuid())
  name        String @unique // "Adult Training", "Kids Training", etc.
  isMonthly   Boolean @default(false) // true for monthly programs, false for seasonal
  sessionHours Float @default(1.5) // hours per session (configurable)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations - now used as templates
  programs Program[]
  templates ProgramTemplate[]
  
  @@map("program_types")
}

// NEW: Flexible program templates system
model ProgramTemplate {
  id          String @id @default(cuid())
  name        String // "U16 Standard Setup", "Adult Full Program", etc.
  description String?
  
  // Template configuration
  programName       String  @map("program_name") // Default program name when using template
  sessionDuration   Float   @map("session_duration") // Hours per session
  isMonthly        Boolean @default(false) @map("is_monthly")
  venueSplitPercent Float   @default(50.0) @map("venue_split_percent")
  
  // Optional reference to program type for categorization
  programTypeId String? @map("program_type_id")
  programType   ProgramType? @relation(fields: [programTypeId], references: [id])
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  pricingTemplates PricingTemplate[]
  
  @@map("program_templates")
}

// NEW: Template pricing options
model PricingTemplate {
  id          String @id @default(cuid())
  templateId  String @map("template_id")
  name        String // "Full Season", "Half Season", "Student Rate", etc.
  price       Int    // Default price in ISK
  order       Int    @default(0) // Display order
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  template ProgramTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@map("pricing_templates")
}

// CHANGED: Much more flexible program model
model Program {
  id              String @id @default(cuid())
  yearId          String
  programTypeId   String? // Optional - for categorization/templates
  
  // LEGACY FIELDS (keeping during transition)
  fullPrice       Int    // Legacy - will be removed after migration
  halfPrice       Int?   // Legacy - will be removed after migration
  subscriptionPrice Int? // Legacy - will be removed after migration
  venueSplitPercent Float @default(50.0) // Legacy venue split
  
  // NEW FLEXIBLE FIELDS
  name            String?  // Custom program name (e.g., "U16 Advanced Spring")
  sessionDuration Float?   @map("session_duration") // Hours per session (per program)
  isMonthly       Boolean? @default(false) @map("is_monthly") // Per program setting
  venueSplitPercentNew Float? @default(50.0) @map("venue_split_percent_new") // New venue split
  
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  year         Year @relation(fields: [yearId], references: [id])
  programType  ProgramType? @relation(fields: [programTypeId], references: [id])
  seasons      Season[]
  instructors  ProgramInstructor[]
  registrations Registration[]
  
  // NEW: Dynamic pricing options
  pricingOptions PricingOption[]
  
  @@map("programs")
}

// NEW: Dynamic pricing options per program
model PricingOption {
  id        String @id @default(cuid())
  programId String @map("program_id")
  name      String // "Full Season", "Student Rate", "Early Bird", etc.
  price     Int    // Price in ISK
  order     Int    @default(0) // Display order
  isActive  Boolean @default(true) @map("is_active") // Can disable options without deleting
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  registrationEntries RegistrationEntry[]
  
  @@map("pricing_options")
}

// Seasons (mostly unchanged)
model Season {
  id        String @id @default(cuid())
  name      String // "Spring 2025", "Summer 2025", "Fall 2025"
  startDate DateTime
  endDate   DateTime
  yearId    String
  programId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  year     Year @relation(fields: [yearId], references: [id])
  program  Program? @relation(fields: [programId], references: [id])
  registrations Registration[]
  sessions ProgramSession[]
  venuePayments VenuePayment[]
  
  @@map("seasons")
}

// Program Instructors (unchanged)
model ProgramInstructor {
  id           String @id @default(cuid())
  programId    String
  instructorId String
  seasonId     String?
  workDays     Json   // array of days like ["MONDAY", "WEDNESDAY", "FRIDAY"]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  program    Program @relation(fields: [programId], references: [id])
  instructor Instructor @relation(fields: [instructorId], references: [id])
  
  @@unique([programId, instructorId, seasonId])
  @@map("program_instructors")
}

// CHANGED: Simplified registration model (keeping legacy during transition)
model Registration {
  id        String @id @default(cuid())
  programId String
  seasonId  String?
  month     Int?    // for monthly programs (1-12)
  
  // LEGACY FIELDS (keeping during transition)
  fullRegistrations Int @default(0)
  halfRegistrations Int @default(0)
  subscriptionRegistrations Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  program Program @relation(fields: [programId], references: [id])
  season  Season? @relation(fields: [seasonId], references: [id])
  
  // NEW: Dynamic registration entries
  entries RegistrationEntry[]
  
  // Ensure one registration per program/season or program/month
  @@unique([programId, seasonId])
  @@unique([programId, month])
  @@map("registrations")
}

// NEW: Dynamic registration entries
model RegistrationEntry {
  id              String @id @default(cuid())
  registrationId  String @map("registration_id")
  pricingOptionId String @map("pricing_option_id")
  quantity        Int    @default(0) // Number of registrations for this pricing option
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  pricingOption  PricingOption @relation(fields: [pricingOptionId], references: [id])
  
  // Ensure one entry per registration/pricing option combination
  @@unique([registrationId, pricingOptionId])
  @@map("registration_entries")
}

// Program Sessions (unchanged)
model ProgramSession {
  id           String @id @default(cuid())
  seasonId     String
  instructorId String
  date         DateTime
  hours        Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  season Season @relation(fields: [seasonId], references: [id])
  
  @@map("program_sessions")
}

// Venue Payments - Manual tracking of actual venue payments made
model VenuePayment {
  id          String @id @default(cuid())
  yearId      String
  seasonId    String? // For seasonal programs
  month       Int?    // For monthly programs (1-12) or month within season
  amount      Int     // Amount paid in ISK
  description String? // Optional description/notes
  paidDate    DateTime @default(now()) // When payment was actually made
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  year   Year    @relation(fields: [yearId], references: [id])
  season Season? @relation(fields: [seasonId], references: [id])
  
  // Ensure one payment per season/month combination
  @@unique([yearId, seasonId, month])
  @@map("venue_payments")
}